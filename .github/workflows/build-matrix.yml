name: Build Matrix (WERROR, Sanitizers, Coverage)

on:
  push:
    branches: [ chore/audit-v2.0.2, ci/sanitizers-and-werror ]
  pull_request:
    branches: [ main, chore/audit-v2.0.2 ]
  workflow_dispatch:


jobs:
  build:
    name: ${{ matrix.os }} • ${{ matrix.compiler }} • ${{ matrix.mode }} • ${{ matrix.sanitize || 'none' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
            mode: release
            sanitize: ""
          - os: ubuntu-22.04
            compiler: gcc
            mode: release
            sanitize: address
          - os: ubuntu-22.04
            compiler: gcc
            mode: release
            sanitize: undefined
          - os: ubuntu-22.04
            compiler: clang
            mode: release
            sanitize: ""
          - os: ubuntu-22.04
            compiler: clang
            mode: release
            sanitize: address
          - os: ubuntu-22.04
            compiler: clang
            mode: release
            sanitize: undefined
          - os: macos-14
            compiler: clang
            mode: release
            sanitize: ""
          - os: macos-14
            compiler: clang
            mode: release
            sanitize: address
          - os: macos-14
            compiler: clang
            mode: release
            sanitize: undefined

    steps:
      - uses: actions/checkout@v4
      - name: Select compiler
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
          fi
      - name: Install deps (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libpam0g-dev cppcheck valgrind
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang
          fi
      - name: Install deps (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update || true
          brew install cppcheck || true
      - name: Build with WERROR${{ matrix.sanitize && format(' + SANITIZE={0}', matrix.sanitize) || '' }}
        run: |
          make clean
          if [ -n "${{ matrix.sanitize }}" ]; then
            make tests WERROR=1 SANITIZE=${{ matrix.sanitize }}
          else
            make tests WERROR=1
          fi
      - name: Static analysis (cppcheck)
        run: make static-analysis || true
      - name: Run pipeline regression smoke (optional)
        if: startsWith(matrix.os, 'ubuntu') && matrix.sanitize == ''
        run: |
          ./scripts/run_pipeline_regression_tests.sh --smoke-only || true

  coverage:
    name: Coverage (Ubuntu + gcc)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libpam0g-dev gcovr
      - name: Build with coverage
        run: |
          make clean
          make tests COVERAGE=1
      - name: Generate coverage report
        run: |
          gcovr -r . --exclude-directories obj --xml -o coverage.xml || true
          gcovr -r . --exclude-directories obj --branches --txt || true
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            gcovr*.txt



  centos:
    name: CentOS/Alma • ${{ matrix.container }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: centos:7
            pm: yum
          - container: almalinux:8
            pm: dnf
    steps:
      - uses: actions/checkout@v4
      - name: Build inside container
        run: |
          set -euxo pipefail
          IMAGE=${{ matrix.container }}
          PM=${{ matrix.pm }}
          docker run --rm -v "$PWD":/ws -w /ws "$IMAGE" sh -euxc '
            PM="'$PM'";
            if ! command -v "$PM" >/dev/null 2>&1; then PM=yum; fi
            if [ "$PM" = dnf ]; then dnf -y update || true; else yum -y update || true; fi
            if [ "$PM" = yum ]; then yum -y groupinstall "Development Tools" || true; fi
            if [ "$PM" = dnf ]; then
              dnf -y install gcc make pam-devel which || (dnf -y install gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ make pam-devel which || true)
            else
              yum -y install gcc make pam-devel which || true
            fi
            make clean
            make tests WERROR=1 CC=gcc
            for t in bin/test_*; do SUDOSH_TEST_MODE=1 "$t"; done
          '