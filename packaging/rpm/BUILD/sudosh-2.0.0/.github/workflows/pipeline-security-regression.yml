name: Pipeline Security Regression Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Makefile'
      - '.github/workflows/pipeline-security-regression.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Makefile'
      - '.github/workflows/pipeline-security-regression.yml'
  schedule:
    # Run daily at 2 AM UTC to catch any regressions
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  pipeline-security-regression:
    name: Pipeline Security Regression Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [debug, release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libpam0g-dev \
          libpam-modules-dev \
          clang \
          valgrind \
          cppcheck
          
    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
        fi
        
    - name: Set build flags
      run: |
        if [ "${{ matrix.build_type }}" = "debug" ]; then
          echo "CFLAGS=-Wall -Wextra -std=c99 -g -O0 -D_GNU_SOURCE -DDEBUG" >> $GITHUB_ENV
        else
          echo "CFLAGS=-Wall -Wextra -std=c99 -O2 -D_GNU_SOURCE -DNDEBUG" >> $GITHUB_ENV
        fi
        
    - name: Build sudosh
      run: |
        make clean
        make CC=$CC CFLAGS="$CFLAGS"
        
    - name: Run quick smoke test
      run: |
        make test-pipeline-smoke
        
    - name: Run full pipeline regression tests
      run: |
        make test-pipeline-regression
        
    - name: Run with Valgrind (memory leak detection)
      if: matrix.compiler == 'gcc' && matrix.build_type == 'debug'
      run: |
        valgrind --leak-check=full --error-exitcode=1 \
          ./bin/test_pipeline_regression || {
          echo "Memory leaks detected in pipeline code!"
          exit 1
        }
        
    - name: Static analysis with cppcheck
      if: matrix.compiler == 'gcc'
      run: |
        cppcheck --enable=all --std=c99 --suppress=missingIncludeSystem \
          --error-exitcode=1 src/pipeline.c || {
          echo "Static analysis found issues in pipeline code!"
          exit 1
        }
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-regression-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          pipeline_regression_test.log
          pipeline_regression_report.txt
          
    - name: Check for critical security failures
      run: |
        if [ -f pipeline_regression_report.txt ]; then
          if grep -q "CRITICAL.*Security regression detected" pipeline_regression_report.txt; then
            echo "::error::Critical security regression detected in pipeline functionality!"
            echo "::error::This indicates a serious security vulnerability has been introduced."
            echo "::error::DO NOT MERGE until this is resolved."
            exit 1
          fi
        fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: pipeline-security-regression
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpam0g-dev libpam-modules-dev
        
    - name: Build for security audit
      run: |
        make clean
        make CFLAGS="-Wall -Wextra -std=c99 -O2 -D_GNU_SOURCE -fstack-protector-strong -D_FORTIFY_SOURCE=2"
        
    - name: Test pipeline whitelist integrity
      run: |
        # Create a test to verify no dangerous commands have been added to whitelist
        cat > test_whitelist_integrity.c << 'EOF'
        #include <stdio.h>
        #include <string.h>
        #include "src/sudosh.h"
        
        int main() {
            // Critical: These commands must NEVER be whitelisted
            const char *dangerous[] = {
                "rm", "chmod", "chown", "dd", "mount", "umount",
                "bash", "sh", "zsh", "csh", "tcsh", "ksh", "fish",
                "iptables", "kill", "killall", "pkill", "sudo", "su",
                "passwd", "chpasswd", "usermod", "useradd", "userdel",
                "fdisk", "mkfs", "fsck", "parted", "lvm", "mdadm",
                NULL
            };
            
            for (int i = 0; dangerous[i]; i++) {
                if (is_whitelisted_pipe_command(dangerous[i])) {
                    printf("SECURITY VIOLATION: %s is whitelisted!\n", dangerous[i]);
                    return 1;
                }
            }
            
            printf("Whitelist integrity check passed\n");
            return 0;
        }
        EOF
        
        gcc -Isrc -c test_whitelist_integrity.c -o test_whitelist_integrity.o
        gcc test_whitelist_integrity.o obj/pipeline.o obj/security.o obj/utils.o \
          obj/logging.o obj/auth.o obj/command.o obj/nss.o obj/sudoers.o \
          obj/sssd.o obj/filelock.o obj/shell_enhancements.o obj/shell_env.o \
          obj/config.o -o test_whitelist_integrity -lpam -lpam_misc
        ./test_whitelist_integrity
        
    - name: Test pager security configuration
      run: |
        # Verify pager security environment is properly configured
        cat > test_pager_security.c << 'EOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include "src/sudosh.h"
        
        int main() {
            setup_secure_pager_environment();
            
            char *lesssecure = getenv("LESSSECURE");
            if (!lesssecure || strcmp(lesssecure, "1") != 0) {
                printf("SECURITY VIOLATION: LESSSECURE not set to 1\n");
                return 1;
            }
            
            char *lessopen = getenv("LESSOPEN");
            if (!lessopen || strcmp(lessopen, "") != 0) {
                printf("SECURITY VIOLATION: LESSOPEN not disabled\n");
                return 1;
            }
            
            char *visual = getenv("VISUAL");
            if (!visual || strcmp(visual, "/bin/false") != 0) {
                printf("SECURITY VIOLATION: VISUAL not disabled\n");
                return 1;
            }
            
            printf("Pager security configuration verified\n");
            return 0;
        }
        EOF
        
        gcc -Isrc -c test_pager_security.c -o test_pager_security.o
        gcc test_pager_security.o obj/security.o obj/utils.o obj/logging.o \
          obj/auth.o obj/command.o obj/nss.o obj/sudoers.o obj/sssd.o \
          obj/filelock.o obj/shell_enhancements.o obj/shell_env.o \
          obj/config.o obj/pipeline.o -o test_pager_security -lpam -lpam_misc
        ./test_pager_security

  notification:
    name: Notify on Critical Failure
    runs-on: ubuntu-latest
    needs: [pipeline-security-regression, security-audit]
    if: failure()
    
    steps:
    - name: Send notification
      run: |
        echo "::warning::Pipeline security regression tests failed!"
        echo "::warning::This may indicate a security vulnerability has been introduced."
        echo "::warning::Please review the test results and fix any critical issues before merging."
